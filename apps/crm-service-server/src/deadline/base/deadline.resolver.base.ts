/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Deadline } from "./Deadline";
import { DeadlineCountArgs } from "./DeadlineCountArgs";
import { DeadlineFindManyArgs } from "./DeadlineFindManyArgs";
import { DeadlineFindUniqueArgs } from "./DeadlineFindUniqueArgs";
import { CreateDeadlineArgs } from "./CreateDeadlineArgs";
import { UpdateDeadlineArgs } from "./UpdateDeadlineArgs";
import { DeleteDeadlineArgs } from "./DeleteDeadlineArgs";
import { Lead } from "../../lead/base/Lead";
import { DeadlineService } from "../deadline.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Deadline)
export class DeadlineResolverBase {
  constructor(
    protected readonly service: DeadlineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Deadline",
    action: "read",
    possession: "any",
  })
  async _deadlinesMeta(
    @graphql.Args() args: DeadlineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Deadline])
  @nestAccessControl.UseRoles({
    resource: "Deadline",
    action: "read",
    possession: "any",
  })
  async deadlines(
    @graphql.Args() args: DeadlineFindManyArgs
  ): Promise<Deadline[]> {
    return this.service.deadlines(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Deadline, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Deadline",
    action: "read",
    possession: "own",
  })
  async deadline(
    @graphql.Args() args: DeadlineFindUniqueArgs
  ): Promise<Deadline | null> {
    const result = await this.service.deadline(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Deadline)
  @nestAccessControl.UseRoles({
    resource: "Deadline",
    action: "create",
    possession: "any",
  })
  async createDeadline(
    @graphql.Args() args: CreateDeadlineArgs
  ): Promise<Deadline> {
    return await this.service.createDeadline({
      ...args,
      data: {
        ...args.data,

        lead: args.data.lead
          ? {
              connect: args.data.lead,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Deadline)
  @nestAccessControl.UseRoles({
    resource: "Deadline",
    action: "update",
    possession: "any",
  })
  async updateDeadline(
    @graphql.Args() args: UpdateDeadlineArgs
  ): Promise<Deadline | null> {
    try {
      return await this.service.updateDeadline({
        ...args,
        data: {
          ...args.data,

          lead: args.data.lead
            ? {
                connect: args.data.lead,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Deadline)
  @nestAccessControl.UseRoles({
    resource: "Deadline",
    action: "delete",
    possession: "any",
  })
  async deleteDeadline(
    @graphql.Args() args: DeleteDeadlineArgs
  ): Promise<Deadline | null> {
    try {
      return await this.service.deleteDeadline(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Lead, {
    nullable: true,
    name: "lead",
  })
  @nestAccessControl.UseRoles({
    resource: "Lead",
    action: "read",
    possession: "any",
  })
  async getLead(@graphql.Parent() parent: Deadline): Promise<Lead | null> {
    const result = await this.service.getLead(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
