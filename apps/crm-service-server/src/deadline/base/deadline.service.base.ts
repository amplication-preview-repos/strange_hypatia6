/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Deadline as PrismaDeadline,
  Lead as PrismaLead,
} from "@prisma/client";

export class DeadlineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DeadlineCountArgs, "select">): Promise<number> {
    return this.prisma.deadline.count(args);
  }

  async deadlines(
    args: Prisma.DeadlineFindManyArgs
  ): Promise<PrismaDeadline[]> {
    return this.prisma.deadline.findMany(args);
  }
  async deadline(
    args: Prisma.DeadlineFindUniqueArgs
  ): Promise<PrismaDeadline | null> {
    return this.prisma.deadline.findUnique(args);
  }
  async createDeadline(
    args: Prisma.DeadlineCreateArgs
  ): Promise<PrismaDeadline> {
    return this.prisma.deadline.create(args);
  }
  async updateDeadline(
    args: Prisma.DeadlineUpdateArgs
  ): Promise<PrismaDeadline> {
    return this.prisma.deadline.update(args);
  }
  async deleteDeadline(
    args: Prisma.DeadlineDeleteArgs
  ): Promise<PrismaDeadline> {
    return this.prisma.deadline.delete(args);
  }

  async getLead(parentId: string): Promise<PrismaLead | null> {
    return this.prisma.deadline
      .findUnique({
        where: { id: parentId },
      })
      .lead();
  }
}
